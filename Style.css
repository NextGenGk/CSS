/* CSS Selectors */

Element Selectors (elementName) eg. h1, p
  Eg: h1 {
        // content
      }
Class Selectors (className) eg. my-class, my-css
  Eg: .my-class {
        // content
      }
Id Selectors (IdName) eg. my-id, my-css-id
  Eg: #my-id {
        // content
      }
Attribute Selectors (AttributName) eg. my-attribute, my-css-attribute
  Eg: p[my-attribute] {
        // content
      }
Universal Selectors (Select all html content)
  Eg: * {
        // content
      }

/* Color Properties */

Text
Whenever an element is rendered, these properties are used to determine the color of the text, its background, and any decorations on the text.

color
The color to use when drawing the text and any text decorations (such as the addition of under- or overlines, strike-through lines, and so forth.

background-color
The text's background color.

text-shadow
Configures a shadow effect to apply to text. Among the options for the shadow is the shadow's base color (which is then blurred and blended with the background based on the other parameters). See Text drop shadows to learn more.

text-decoration-color
By default, text decorations (such as underlines, strikethroughs, etc.) use the color property as their colors. However, you can override that behavior and use a different color for them with the text-decoration-color property.

text-emphasis-color
The color to use when drawing emphasis symbols adjacent to each character in the text. This is used primarily when drawing text for East Asian languages.

caret-color
The color to use when drawing the caret (sometimes referred to as the text input cursor) within the element. This is only useful in elements that are editable, such as <input> and <textarea> or elements whose HTML contenteditable attribute is set.

Boxes
Every element is a box with some sort of content, and has a background and a border in addition to whatever contents the box may have.

Borders
See the section Borders for a list of the CSS properties you can use to set the colors of a box's borders.

background-color
The background color to use in areas of the element that have no foreground content.

column-rule-color
The color to use when drawing the line separating columns of text.

outline-color
The color to use when drawing an outline around the outside of the element. This outline is different from the border in that it doesn't get space set aside for it in the document (so it may overlap other content). It's generally used as a focus indicator, to show which element will receive input events.

Borders
Any element can have a border drawn around it. A basic element border is a line drawn around the edges of the element's content. See The box model to learn about the relationship between elements and their borders, and the article Styling borders using CSS to learn more about applying styles to borders.

You can use the border shorthand property, which lets you configure everything about the border in one shot (including non-color features of borders, such as its width, style (solid, dashed, etc.), and so forth.

border-color
Specifies a single color to use for every side of the element's border.

border-left-color, border-right-color, border-top-color, and border-bottom-color
Lets you set the color of the corresponding side of the element's border.

border-block-start-color and border-block-end-color
With these, you can set the color used to draw the borders which are closest to the start and end of the block the border surrounds. In a left-to-right writing mode (such as the way English is written), the block start border is the top edge and the block end is the bottom. This differs from the inline start and end, which are the left and right edges (corresponding to where each line of text in the box begins and ends).

border-inline-start-color and border-inline-end-color
These let you color the edges of the border closest to the beginning and the end of the start of lines of text within the box. Which side this is will vary depending on the writing-mode, direction, and text-orientation properties, which are typically (but not always) used to adjust text directionality based on the language being displayed. For example, if the box's text is being rendered right-to-left, then the border-inline-start-color is applied to the right side of the border.

/* Font Properties */

/* Font Style */
font-style: normal|italic|oblique|initial|inherit;

normal	The browser displays a normal font style. This is default	
italic	The browser displays an italic font style	
oblique	The browser displays an oblique font style	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/*Font Varient */
font-variant: normal|small-caps|initial|inherit;

normal	The browser displays a normal font. This is default	
small-caps	The browser displays a small-caps font	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/*Font Weight*/
font-weight: normal|bold|bolder|lighter|number|initial|inherit;

normal	Defines normal characters. This is default	
bold	Defines thick characters	
bolder	Defines thicker characters	
lighter	Defines lighter characters	
100		Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold
200
300
400
500
600
700
800
900

/* Line Height */
line-height: normal|number|length|initial|inherit;

normal	A normal line height. This is default	
number	A number that will be multiplied with the current font-size to set the line height	
length	A fixed line height in px, pt, cm, etc.	
%	A line height in percent of the current font size	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/* Font Family */
font-family: family-name|generic-family|initial|inherit;

family-name / generic-family	A prioritized list of font family names and/or generic family names	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/* Font Family Names */
font-family: Georgia;
font-family: Times New Roman;
font-family: Arial;
font-family: Helvetica;
font-family: Arial Black;
font-family: Impact;
font-family: Lucida Sans Unicode;
font-family: Tahoma;
font-family: Verdana;
font-family: Courier New;
font-family: Lucida Console;
font-family: serif;
font-family: sans-serif;
font-family: cursive;
font-family: fantasy;
font-family: monospace;

/* Font Sizes */
1px		1/96th Inch
1pt		1/72nd Inch
1em	(100% of its parent)
	Eg: 1em = 1 * 10 = 10px 	// where parent font size is 10px
1rem (100% of root element)
	Eg: 1rem = 1 * 10 = 10px	// where root eleemnt font size is 10px

/* CSS Box Model */
In CSS, the term "box model" is used when talking about design and layout.

The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:

Box Model Image
https://www.simplilearn.com/ice9/free_resources_article_thumb/CSS-Box-Model.png

Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

Example: 
div {
  width: 300px;
  border: 15px solid green;
  padding: 50px;
  margin: 20px;
}

width: top right bottom left
height: top right bottom left

border-style: thickness type color
border-width: top right bottom left / (top + bottom) (left + right)
border-top
border-right
border-bottom
border-left

padding: top right bottom left / (top + bottom) (left + right)
padding-top
padding-right
padding-bottom
padding-left

margin: top right bottom left / (top + bottom) (left + right)
margin-top
margin-right
margin-bottom
margin-left

/* Cascade */
Cascade :

The cascade defines the origin and layer that takes precedence when declarations in more than one origin or cascade layer set a value for a property on an element.

The cascade lies at the core of CSS, as emphasized by the name: Cascading Style Sheets. When a selector matches an element, the property value from the origin with the highest precedence gets applied, even if the selector from a lower precedence origin or layer has greater specificity.

Categories :
1. Position :

li {									Precedence
	color : red;							1
	color: blue;							2	// this color is applied
}

2. Specificity :							Precedence
li {color: blue;}							1
.first-class {color : red};					2
li[draggable] {color: purple}				3
#first-Id {color: orange}					4				// this color is applied

3. Type :

<link rel="stylesheet" href="style.css">	// Exteranl CSS
<style></style>								// Internal CSS
<h1 style="color:red">Hello world</h1>		// Inline CSS

CSS 									Precedence
Exteranl CSS								1
Internal CSS								2
Inline CSS									3 

4. Importance
li {
	color: red;	!important	// this color is applied, because we specify the importance keyboard after the element
	color: blue; 	
}

/* Cascade Precedence*/
CSS Categories							Precedence
Position									1
Specificity									2
Type										3
Importance									4

/* Combining CSS Selectors */
1. Group Selector : Apply to both selectors

Syntax : Use ( , )
selector, selector {
	color: blue;
}

Example :
h1, p {
	color: blue;
}

Note : We can use, all types of selectors like, element selector, Id selector, Class Selector, Attribute Selector

2. Child Selector : Apply to direct child of left side

Syntax : Use ( > )
sleector > selector {
	color: firebrick;
}

Example :
.box > h1 {
	background-color: cyan;
}

3. Descendent Selector : Apply to a descendent of left side

Syntax : Use ( space )
selector selector {
	color: blue;
}

Example :
.box li {
    color: green;
}

4. Chaining Selector : Apply where all selectors are true

Syntax: Use (No space between selectors)
selectorselector {
	color : cyan;
}

Example :
h1#title.big.heading {
	color: cyan;
}

5. Combining Combiners : Combining all selectors in one

Syntax: Use ( space )
selector selectorselector {
	font-size : 0.5rem;
}

Example :
ul > p.done {
    font-size: 0.5rem;
}

/* CSS Positioning */
Static
Relative
Absolute
z-index
Fixed

1. Static : HTML default flow.

2. Relative : Position relative to the default position.
(Relative positioning takes the static position and then you can move it relative to that location).

3. Absolute : Position relative to the nearest positioned ancestor or top left corner of the webpage.

4. z-Index : The z-index property specifies the stack order of an element.
An element with greater stack order is always in front of an element with a lower stack order.

Note: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display:flex elements).

5. Fixed : Position relative or top left corner of the browser window.

Learn Positioning : https://appbrewery.github.io/css-positioning/

/* Media Query */
It is used for create a responsive website

/* Max-Width */
Syntax : 
@media (max-width: 600px)
   h1 {
	font-size : 20px;
   }
}

Means : Anything that is less than or equal to given size then, the given styling is used inside the curly brackets.

max-width : less than or equal to given size 
Eg : max-width 600px
Means: O to <= 600, then the given styling is applied on the code.

/* Min-Width */
Suntax :
@media (min-width: 600px)
   h1 {
	font-size : 20px;
   }
}

Means : Anything that is greater than to the given size then, the given styling is used inside the curly brackets.

min-width : greater than or equal to given size 
Eg : min-width 600px
Means: 600 to <= 992, then the given styling is applied on the code.

/* Combine multiple medis queries */
Syntax :
@media (min-width : 600px) and (max-width : 1240px) {
	/* Styles applied for screen between 600px to 1240px */
}

Syntax :
@media (max-width : 600px) and (min-width : 1240px) {
	/* Styles applied for screen between less than 600px & greater than 1240px */
}

/* Device */
Syntax :
@media screen (orientation : landscape) {
	/* Styles applied for landscape orientation*/
}

/* Display Properties */
The display property specifies the display behavior (the type of rendering box) of an element.

In HTML, the default display property value is taken from the HTML specifications or from the browser/user default style sheet. The default value in XML is inline, including SVG elements.
inline : elements can go on the same line
block : set height and width
inline-block : elements can go on the same line + set height and width

/* Float Properties */
The float property can be used to wrap text around images.

The float property is used for positioning and formatting content e.g. let an image float left to the text in a container.

left - The element floats to the left of its container
right - The element floats to the right of its container
none - The element does not float (will be displayed just where it occurs in the text). This is default
inherit - The element inherits the float value of its parent

clear : It clears the responsibility to wrap around things that are floating (It means the element/content going to its normal position
none - The element is not pushed below left or right floated elements. This is default
left - The element is pushed below left floated elements
right - The element is pushed below right floated elements
both - The element is pushed below both left and right floated elements
inherit - The element inherits the clear value from its parent

/* FlexBox */
The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.

display: flex; 
The flex container becomes flexible by setting the display property to flex

display: inline-flex
Same as inline block

/* Flex Direction */
The flex-direction property specifies the direction of the flexible items.

row : Default value. The flexible items are displayed horizontally, as a row	
row-reverse : Same as row, but in reverse order	
column : The flexible items are displayed vertically, as a column	
column-reverse : Same as column, but in reverse order

flex-basis is added only in the child.

Reference :
https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors
https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators

/* Flexible Layout */
/* Flex */
order : The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order.

flex-wrap : The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it setsthe direction that lines are stacked.

nowrap
The flex items are laid out in a single line which may cause the flex container to overflow. The cross-start is either equivalent to start orbefore depending on the flex-direction value. This is the default value.

wrap
The flex items break into multiple lines. The cross-start is either equivalent to start or before depending flex-direction value and the cross-end is the opposite of the specified cross-start.

wrap-reverse
Behaves the same as wrap but cross-start and cross-end are permuted.

/* Justify Content */
The CSS justify-content property defines how the browser distributes space between and around content items along the main-axis of a flex container,and the inline axis of a grid container. (Work on Main Axis)

start :
The items are packed flush to each other toward the start edge of the alignment container in the main axis.

end :
The items are packed flush to each other toward the end edge of the alignment container in the main axis.
 
flex-start :
The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-start side. This only applies to flex layout items. For items that are not children of a flex container, this value is treated like start.

flex-end :
The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-end side. This only applies to flex layout items. For items that are not children of a flex container, this value is treated like end.

center :
The items are packed flush to each other toward the center of the alignment container along the main axis.

left :
The items are packed flush with each other toward the left edge of the alignment container. When the property's horizontal axis is not parallel with the inline axis, such as when flex-direction: column; is set, this value behaves like start.

right :
The items are packed flush to each other toward the right edge of the alignment container in the appropriate axis. If the property's axis is not parallel with the inline axis (in a grid container) or the main-axis (in a flexbox container), this value behaves like start.

normal : 
Behaves as stretch, except in the case of multi-column containers with a non-auto column-width, in which case the columns take their specified column-width rather than stretching to fill the container. As stretch behaves as start in flex containers, normal also behaves as start.

space-between :
The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. The first item is flush with the main-start edge, and the last item is flush with the main-end edge.

space-around :
The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. The empty space before the first and after the last item equals half of the space between each pair of adjacent items.

space-evenly :
The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.

stretch :
If the combined size of the items along the main axis is less than the size of the alignment container, any auto-sized items have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container along the main axis.

/* Align Items */
The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. (Work in Cross Axis) 

flex-start :
Used in flex layout only, aligns the flex items flush against the flex container's main-start or cross-start side.

flex-end :
Used in flex layout only, aligns the flex items flush against the flex container's main-end or cross-end side.

center :
The flex items' margin boxes are centered within the line on the cross-axis. If the cross-size of an item is larger than the flex container, it will overflow equally in both directions.

start :
The items are packed flush to each other toward the start edge of the alignment container in the appropriate axis.

end :
The items are packed flush to each other toward the end edge of the alignment container in the appropriate axis.

self-start :
The items are packed flush to the edge of the alignment container's start side of the item, in the appropriate axis.

self-end :
The items are packed flush to the edge of the alignment container's end side of the item, in the appropriate axis.

baseline, first baseline, last baseline :
All flex items are aligned such that their flex container baselines align. The item with the largest distance between its cross-start margin edge and its baseline is flushed with the cross-start edge of the line.

stretch :
If the items are smaller than the alignment container, auto-sized items will be equally enlarged to fill the container, respecting the items' width and height limits.

/* Align Self */
The align-self CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. (Work on when 'flex-wrap' is 'wrap')

auto :
Computes to the parent's align-items value.

normal : 
The effect of this keyword is dependent of the layout mode we are in:

In absolutely-positioned layouts, the keyword behaves like start on replaced absolutely-positioned boxes, and as stretch on all other absolutely-positioned boxes.
In static position of absolutely-positioned layouts, the keyword behaves as stretch.
For flex items, the keyword behaves as stretch.
For grid items, this keyword leads to a behavior similar to the one of stretch, except for boxes with an aspect ratio or an intrinsic sizes where it behaves like start.
The property doesn't apply to block-level boxes, and to table cells.

self-start :
Aligns the items to be flush with the edge of the alignment container corresponding to the item's start side in the cross axis.

self-end :
Aligns the items to be flush with the edge of the alignment container corresponding to the item's end side in the cross axis.

flex-start :
The cross-start margin edge of the flex item is flushed with the cross-start edge of the line.

flex-end :
The cross-end margin edge of the flex item is flushed with the cross-end edge of the line.

center :
The flex item's margin box is centered within the line on the cross-axis. If the cross-size of the item is larger than the flex container, it will overflow equally in both directions.

baseline, first baseline, last baseline :
Specifies participation in first- or last-baseline alignment: aligns the alignment baseline of the box's first or last baseline set with the corresponding baseline in the shared first or last baseline set of all the boxes in its baseline-sharing group. The fallback alignment for first baseline is start, the one for last baseline is end.

stretch : 
If the combined size of the items along the cross axis is less than the size of the alignment container and the item is auto-sized, its size is increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size of all auto-sized items exactly fills the alignment container along the cross axis.
