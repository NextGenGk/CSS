/* CSS Selectors */

Element Selectors (elementName) eg. h1, p
  Eg: h1 {
        // content
      }
Class Selectors (className) eg. my-class, my-css
  Eg: .my-class {
        // content
      }
Id Selectors (IdName) eg. my-id, my-css-id
  Eg: #my-id {
        // content
      }
Attribute Selectors (AttributName) eg. my-attribute, my-css-attribute
  Eg: p[my-attribute] {
        // content
      }
Universal Selectors (Select all html content)
  Eg: * {
        // content
      }

/* Color Properties */

Text
Whenever an element is rendered, these properties are used to determine the color of the text, its background, and any decorations on the text.

color
The color to use when drawing the text and any text decorations (such as the addition of under- or overlines, strike-through lines, and so forth.

background-color
The text's background color.

text-shadow
Configures a shadow effect to apply to text. Among the options for the shadow is the shadow's base color (which is then blurred and blended with the background based on the other parameters). See Text drop shadows to learn more.

text-decoration-color
By default, text decorations (such as underlines, strikethroughs, etc.) use the color property as their colors. However, you can override that behavior and use a different color for them with the text-decoration-color property.

text-emphasis-color
The color to use when drawing emphasis symbols adjacent to each character in the text. This is used primarily when drawing text for East Asian languages.

caret-color
The color to use when drawing the caret (sometimes referred to as the text input cursor) within the element. This is only useful in elements that are editable, such as <input> and <textarea> or elements whose HTML contenteditable attribute is set.

Boxes
Every element is a box with some sort of content, and has a background and a border in addition to whatever contents the box may have.

Borders
See the section Borders for a list of the CSS properties you can use to set the colors of a box's borders.

background-color
The background color to use in areas of the element that have no foreground content.

column-rule-color
The color to use when drawing the line separating columns of text.

outline-color
The color to use when drawing an outline around the outside of the element. This outline is different from the border in that it doesn't get space set aside for it in the document (so it may overlap other content). It's generally used as a focus indicator, to show which element will receive input events.

Borders
Any element can have a border drawn around it. A basic element border is a line drawn around the edges of the element's content. See The box model to learn about the relationship between elements and their borders, and the article Styling borders using CSS to learn more about applying styles to borders.

You can use the border shorthand property, which lets you configure everything about the border in one shot (including non-color features of borders, such as its width, style (solid, dashed, etc.), and so forth.

border-color
Specifies a single color to use for every side of the element's border.

border-left-color, border-right-color, border-top-color, and border-bottom-color
Lets you set the color of the corresponding side of the element's border.

border-block-start-color and border-block-end-color
With these, you can set the color used to draw the borders which are closest to the start and end of the block the border surrounds. In a left-to-right writing mode (such as the way English is written), the block start border is the top edge and the block end is the bottom. This differs from the inline start and end, which are the left and right edges (corresponding to where each line of text in the box begins and ends).

border-inline-start-color and border-inline-end-color
These let you color the edges of the border closest to the beginning and the end of the start of lines of text within the box. Which side this is will vary depending on the writing-mode, direction, and text-orientation properties, which are typically (but not always) used to adjust text directionality based on the language being displayed. For example, if the box's text is being rendered right-to-left, then the border-inline-start-color is applied to the right side of the border.

/* Font Properties */

/* Font Style */
font-style: normal|italic|oblique|initial|inherit;

normal	The browser displays a normal font style. This is default	
italic	The browser displays an italic font style	
oblique	The browser displays an oblique font style	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/*Font Varient */
font-variant: normal|small-caps|initial|inherit;

normal	The browser displays a normal font. This is default	
small-caps	The browser displays a small-caps font	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/*Font Weight*/
font-weight: normal|bold|bolder|lighter|number|initial|inherit;

normal	Defines normal characters. This is default	
bold	Defines thick characters	
bolder	Defines thicker characters	
lighter	Defines lighter characters	
100		Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold
200
300
400
500
600
700
800
900

/* Line Height */
line-height: normal|number|length|initial|inherit;

normal	A normal line height. This is default	
number	A number that will be multiplied with the current font-size to set the line height	
length	A fixed line height in px, pt, cm, etc.	
%	A line height in percent of the current font size	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/* Font Family */
font-family: family-name|generic-family|initial|inherit;

family-name / generic-family	A prioritized list of font family names and/or generic family names	
initial	Sets this property to its default value.
inherit	Inherits this property from its parent element.

/* Font Family Names */
font-family: Georgia;
font-family: Times New Roman;
font-family: Arial;
font-family: Helvetica;
font-family: Arial Black;
font-family: Impact;
font-family: Lucida Sans Unicode;
font-family: Tahoma;
font-family: Verdana;
font-family: Courier New;
font-family: Lucida Console;
font-family: serif;
font-family: sans-serif;
font-family: cursive;
font-family: fantasy;
font-family: monospace;

/* Font Sizes */
1px		1/96th Inch
1pt		1/72nd Inch
1em	(100% of its parent)
	Eg: 1em = 1 * 10 = 10px 	// where parent font size is 10px
1rem (100% of root element)
	Eg: 1rem = 1 * 10 = 10px	// where root eleemnt font size is 10px

/* CSS Box Model */
In CSS, the term "box model" is used when talking about design and layout.

The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:

Box Model Image
https://www.simplilearn.com/ice9/free_resources_article_thumb/CSS-Box-Model.png

Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

Example: 
div {
  width: 300px;
  border: 15px solid green;
  padding: 50px;
  margin: 20px;
}

width: top right bottom left
height: top right bottom left

border-style: thickness type color
border-width: top right bottom left / (top + bottom) (left + right)
border-top
border-right
border-bottom
border-left

padding: top right bottom left / (top + bottom) (left + right)
padding-top
padding-right
padding-bottom
padding-left

margin: top right bottom left / (top + bottom) (left + right)
margin-top
margin-right
margin-bottom
margin-left

/* Cascade */
Cascade :

The cascade defines the origin and layer that takes precedence when declarations in more than one origin or cascade layer set a value for a property on an element.

The cascade lies at the core of CSS, as emphasized by the name: Cascading Style Sheets. When a selector matches an element, the property value from the origin with the highest precedence gets applied, even if the selector from a lower precedence origin or layer has greater specificity.

Categories :
1. Position :

li {									Precedence
	color : red;							1
	color: blue;							2	// this color is applied
}

2. Specificity :							Precedence
li {color: blue;}							1
.first-class {color : red};					2
li[draggable] {color: purple}				3
#first-Id {color: orange}					4				// this color is applied

3. Type :

<link rel="stylesheet" href="style.css">	// Exteranl CSS
<style></style>								// Internal CSS
<h1 style="color:red">Hello world</h1>		// Inline CSS

CSS 									Precedence
Exteranl CSS								1
Internal CSS								2
Inline CSS									3 

4. Importance
li {
	color: red;	!important	// this color is applied, because we specify the importance keyboard after the element
	color: blue; 	
}

/* Cascade Precedence*/
CSS Categories							Precedence
Position									1
Specificity									2
Type										3
Importance									4

/* Combining CSS Selectors */
1. Group Selector : Apply to both selectors

Syntax : Use ( , )
selector, selector {
	color: blue;
}

Example :
h1, p {
	color: blue;
}

Note : We can use, all types of selectors like, element selector, Id selector, Class Selector, Attribute Selector

2. Child Selector : Apply to direct child of left side

Syntax : Use ( > )
sleector > selector {
	color: firebrick;
}

Example :
.box > h1 {
	background-color: cyan;
}

3. Descendent Selector : Apply to a descendent of left side

Syntax : Use ( space )
selector selector {
	color: blue;
}

Example :
.box li {
    color: green;
}

4. Chaining Selector : Apply where all selectors are true

Syntax: Use (No space between selectors)
selectorselector {
	color : cyan;
}

Example :
h1#title.big.heading {
	color: cyan;
}

5. Combining Combiners : Combining all selectors in one

Syntax: Use ( space )
selector selectorselector {
	font-size : 0.5rem;
}

Example :
ul > p.done {
    font-size: 0.5rem;
}
